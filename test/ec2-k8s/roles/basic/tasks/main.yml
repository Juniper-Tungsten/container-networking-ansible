---
- name: Create a VPC
  ec2_vpc:
    state: present
    region: "{{ aws_region }}"
    cidr_block: 192.168.0.0/16
    resource_tags:
      "Name": "k8s-vpc-{{ job_id }}"
      "Cluster": "k8s-ansible-{{ job_id }}"
    subnets:
      - cidr: 192.168.0.0/24
        resource_tags: {"Name": "k8s-{{ job_id }}-public"}
    internet_gateway: True
    route_tables:
      - subnets:
          - 192.168.0.0/24
        routes:
          - dest: 0.0.0.0/0
            gw: igw
  register: vpc

- name: Jump host security group
  ec2_group:
    name: management
    description: "Management end-point SG {{ job_id }}"
    region: "{{ aws_region }}"
    vpc_id: "{{ vpc.vpc_id }}"
    rules:
      - proto: tcp
        from_port: 22
        to_port: 22
        cidr_ip: 0.0.0.0/0
    rules_egress:
      - proto: all
        cidr_ip: 0.0.0.0/0
  register: sg_management

- name: Read default security group
  ec2_group:
    name: default
    description: "Default SG k8s-vpc-{{ job_id }}"
    state: present
    vpc_id: "{{ vpc.vpc_id }}"
    region: "{{ aws_region }}"
  register: sg_default

- name: Default security group
  ec2_group:
    name: default
    description: "Default SG k8s-vpc-{{ job_id }}"
    vpc_id: "{{ vpc.vpc_id }}"
    region: "{{ aws_region }}"
    rules:
      - proto: all
        group_id: "{{ sg_default.group_id }}"
      - proto: all
        group_id: "{{ sg_management.group_id }}"
    rules_egress:
      - proto: all
        cidr_ip: 0.0.0.0/0
  register: sg_default

- name: Management host
  ec2:
    image: "{{ ec2_image }}"
    key_name: k8s
    instance_tags: {"Name": "k8s-mgmt-{{ job_id }}", "Cluster": "k8s-ansible-{{ job_id }}"}
    instance_type: m3.medium
    region: "{{ aws_region }}"
    vpc_subnet_id: "{{ vpc.subnets[0].id }}"
    group_id: "{{ sg_management.group_id }}"
    assign_public_ip: yes
    count_tag:
      Name: "k8s-mgmt-{{ job_id }}"
    exact_count: 1
    wait: true
  register: k8s_management

- add_host: name='{{ k8s_management.tagged_instances[0].public_dns_name }}' groups=management ansible_ssh_user="{{ ssh_user }}"

- name: Create gateway instance
  ec2:
    image: "{{ ec2_image }}"
    key_name: k8s
    instance_tags: {"Name": "k8s-gateway-{{ job_id }}", "Cluster": "k8s-ansible-{{ job_id }}"}
    instance_type: m3.medium
    region: "{{ aws_region }}"
    vpc_subnet_id: "{{ vpc.subnets[0].id }}"
    assign_public_ip: yes
    source_dest_check: no
    wait: yes
    count_tag:
      Name: "k8s-gateway-{{ job_id }}"
    exact_count: 1
  register: k8s_gateway

- name: Create master instance
  ec2:
    image: "{{ ec2_image }}"
    key_name: k8s
    instance_tags: {"Name": "k8s-master-{{ job_id }}", "Cluster": "k8s-ansible-{{ job_id }}"}
    instance_type: m3.large
    region: "{{ aws_region }}"
    vpc_subnet_id: "{{ vpc.subnets[0].id }}"
    assign_public_ip: yes        
    count_tag:
      Name: "k8s-master-{{ job_id }}"
    exact_count: 1
  register: k8s_master

- name: Create nodes
  ec2:
    image: "{{ ec2_image }}"
    key_name: k8s
    instance_tags:
      Name: "k8s-node-{{ job_id }}"
      Cluster: "k8s-ansible-{{ job_id }}"
    instance_type: m3.medium
    region: "{{ aws_region }}"
    vpc_subnet_id: "{{ vpc.subnets[0].id }}"
    assign_public_ip: yes
    count_tag:
      Name: "k8s-node-{{ job_id }}"
    exact_count: 2
  register: k8s_nodes

- name: Update the vpc
  ec2_vpc:
    state: present
    region: "{{ aws_region }}"
    cidr_block: 192.168.0.0/16
    resource_tags: {"Name": "k8s-vpc-{{ job_id }}", "Cluster": "k8s-ansible-{{ job_id }}"}
    vpc_id: "{{ vpc.vpc_id }}"
    subnets:
      - cidr: 192.168.0.0/24
        resource_tags: {"Name": "k8s-{{ job_id }}-public"}
    internet_gateway: True
    route_tables:
      - subnets:
        - 192.168.0.0/24
        routes:
          - dest: 0.0.0.0/0
            gw: igw
          - dest: "{{ k8s_public_subnet }}"
            gw: "{{ k8s_gateway.tagged_instances[0].id }}"

- name: Store the status of the cluster
  template: src=status.j2 dest="{{ inventory_dir }}/cluster.status"

- name: Create inventory file
  template: src=inventory.j2 dest="{{ inventory_dir }}/inventory.cluster"

- name: VPC status
  template: src=vpc.j2 dest="{{ inventory_dir }}/vpc.status"

- wait_for: host="{{ k8s_management.tagged_instances[0].public_dns_name }}" port=22

